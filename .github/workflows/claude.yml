name: Claude PR Assistant

permissions:
  contents: write
  pull-requests: write
  issues: write
  id-token: write

on:
  issue_comment:
    types: [created]
  pull_request_review_comment:
    types: [created]
  issues:
    types: [opened, assigned]
  pull_request:
    types: [labeled]  # Also trigger when 'claude' label is added

jobs:
  claude-pr:
    if: |
      (github.event_name == 'issue_comment' && contains(github.event.comment.body, '@claude')) ||
      (github.event_name == 'pull_request_review_comment' && contains(github.event.comment.body, '@claude')) ||
      (github.event_name == 'issues' && contains(github.event.issue.body, '@claude')) ||
      (github.event_name == 'pull_request' && contains(github.event.label.name, 'claude'))
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      # Analyze context to provide smart documentation hints
      - name: Analyze Context
        id: context
        run: |
          # Determine what type of request this is
          REQUEST_TYPE="general"
          
          # Combine all text to analyze
          FULL_TEXT="${{ github.event.comment.body }} ${{ github.event.issue.title }} ${{ github.event.issue.body }}"
          
          # Check patterns
          if [[ "$FULL_TEXT" =~ (test|fail|mock|pytest|coverage) ]]; then
            REQUEST_TYPE="testing"
          elif [[ "$FULL_TEXT" =~ (implement|add|create|provider|embedder|feature) ]]; then
            REQUEST_TYPE="implementation"
          elif [[ "$FULL_TEXT" =~ (bug|error|fix|issue|crash|exception) ]]; then
            REQUEST_TYPE="debugging"
          elif [[ "$FULL_TEXT" =~ (slow|performance|optimize|speed|memory|leak) ]]; then
            REQUEST_TYPE="performance"
          elif [[ "${{ github.event_name }}" == "pull_request" ]]; then
            REQUEST_TYPE="review"
          fi
          
          echo "request_type=$REQUEST_TYPE" >> $GITHUB_OUTPUT
          echo "Detected request type: $REQUEST_TYPE"
      
      - uses: anthropics/claude-code-action@beta
        with:
          # Triggers
          trigger_phrase: "@claude"
          label_trigger: "claude"  # Also respond to 'claude' label
          
          # Claude Configuration
          anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}
          model: "claude-opus-4-20250514"
          max_turns: 30
          timeout_minutes: 60
          
          # Branch Management
          branch_prefix: "claude/"
          base_branch: ${{ github.event.pull_request.base.ref || github.event.repository.default_branch }}
          
          # Smart Instructions based on context
          custom_instructions: |
            You are working on MemAgent, an intelligent memory management system.
            
            IMPORTANT: The project uses a modular documentation structure. The main CLAUDE.md 
            file is an index. Based on the detected context type (${{ steps.context.outputs.request_type }}), 
            prioritize loading these documents:
            
            ${{ steps.context.outputs.request_type == 'testing' && '- PRIMARY: Load .claude/testing-guide.md for test patterns and mocking' || '' }}
            ${{ steps.context.outputs.request_type == 'implementation' && '- PRIMARY: Load .claude/implementation-guide.md and .claude/api-reference.md' || '' }}
            ${{ steps.context.outputs.request_type == 'debugging' && '- PRIMARY: Load .claude/error-handling.md and .claude/technical-debt.md' || '' }}
            ${{ steps.context.outputs.request_type == 'performance' && '- PRIMARY: Load .claude/performance.md for optimization patterns' || '' }}
            ${{ steps.context.outputs.request_type == 'review' && '- PRIMARY: Load .claude/code-standards.md for review criteria' || '' }}
            
            Additional context:
            - Current status: Week 7/12 of MongoDB migration
            - Build new features for MongoProvider, not SQLiteProvider
            - See .claude/migration-status.md for migration details
            
            Remember to check CLAUDE.md first as your navigation index, then load the specific 
            documentation files relevant to this ${{ steps.context.outputs.request_type }} request.
            
          # Tool restrictions (optional - uncomment if needed)
          # disallowed_tools: "Bash"  # Prevent shell access if desired
          # allowed_tools: "WebSearch"  # Add web search capability